<launch>  
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/simulators/bullet_simulator.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router" file="$(find prx_input)/templates/controllers/router.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/manipulator" file="$(find manipulation)/input/motoman/motoman_complete_kinect_reflex.yaml"/>

  <rosparam ns="simulation/simulator/obstacles">
    table:
      type: bullet_obstacle
      geometries:
        -
          name: foundation
          collision_geometry:
            type: box
            dims: [0.5, 1.11, 1.4]
            material: shelf_grey
          config:
            position: [0.9, 0.3, 0]
            orientation: [0, 0, 0, 1]
  </rosparam>

    <rosparam ns="planning/world_model/simulator/obstacles">
    table:
      type: bullet_obstacle
      geometries:
        -
          name: foundation
          collision_geometry:
            type: box
            dims: [0.5, 1.11, 1.4]
            material: shelf_grey
          config:
            position: [0.9, 0.3, 0]
            orientation: [0, 0, 0, 1]
  </rosparam>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/router/subsystems/box1">
    type: bullet_plant
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.445, 0.035, 0.125]
          material: red
        config: 
          position: [0.9, .2, 0.77]
          orientation: [0, 0, 0, 1]
        mass: .05
    
  </rosparam>


  <rosparam ns="simulation/simulator/subsystems/consumer">
    keep_last_control: false
  </rosparam>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>


  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/spaces/space_types.yaml"/>  
  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml" />
  <rosparam ns="planning/world_model" command="load" file="$(find prx_input)/templates/simulators/bullet_simulator.yaml"/>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/simulator/subsystems/manipulator" file="$(find manipulation)/input/motoman/motoman_complete_kinect_reflex.yaml"/>
  
  <rosparam command="load" ns="planning">
    state_mapping:
      -
        pair: [simulator/consumer/router/manipulator, world_model/simulator/simulator/manipulator]
      -
        pair: [simulator/consumer/router/box1, world_model/simulator/simulator/box1]
    control_mapping:
      -
        pair: [simulator/consumer/router/manipulator, world_model/simulator/simulator/manipulator]
    consumer: simulator/consumer
    # random_seed: 5646
    random_seed: 14391835
    simulate: true
    visualize: true
    persistent: false
    consumer_mapping:
      - 
        pair: [simulator/consumer, manipulator_pc]
    world_model:
      type: manipulation_world_model
      num_ik_seeds: 10
      IK_databases:
        motoman_database:
          distance_metric:
            type: graph_distance_metric
          manipulator: manipulator
          samples: 5000
          serialize_file: motoman[5000].database
  </rosparam>



 <rosparam ns="planning/world_model/simulator/subsystems/simulator">
  type: manipulation_simulator_system
  simulation_step: 0.001
  collision_detection: false
  collision_response: false
  collision_checker:
    type: bullet
 </rosparam>

  <rosparam ns="planning/world_model/planning_contexts">
    manipulator_pc:
      default:
        type: "hide_mapping"
      manipulation_context_info:
        full_arm_context_name: "left_full_arm"
        arm_context_name: "left_arm"
        end_effector_context_name: "left_end_effector"
        start_link: "base_link"
        end_link: "head_sponge"
    left_full_arm:
      default:
        type: "hide_mapping"
    left_arm:
      default:
       type: "hide_mapping"
    left_arm_planning:
      default:
        type: "hide_mapping"
    left_end_effector:
      default:
       type: "hide_mapping"
  </rosparam>

  <rosparam ns="planning/world_model/simulator/subsystems/simulator/subsystems/manipulator">
    planning_contexts:
      manipulator_pc:
        type: "full_mapping"
      left_full_arm:
        type: "motoman_left_full_with_torso_state_mapping"
      left_arm:
        type: "motoman_left_torso_state_mapping"
      left_end_effector:
        type: "motoman_left_gripper_state_mapping"
      left_arm_planning:
        type: "motoman_left_torso_state_mapping"
  </rosparam>

  <rosparam ns="planning/world_model/simulator/subsystems/simulator/subsystems/box1">
    type: bullet_plant
    geometries:
      -
        name: body
        collision_geometry:
          type: box
          dims: [0.445, 0.035, 0.125]
          material: red
        config: 
          position: [0.9, .2, 0.77]
          orientation: [0, 0, 0, 1]
        mass: .05
    planning_contexts:
      manipulator_pc:
        type: "full_mapping"
    
  </rosparam>

  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
 
  <rosparam ns="planning/task_planner/" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>

  <rosparam ns="planning/task_planner/" >
    specification: 
      type: single_shot_specification
    query:
      type: single_shot_query
  </rosparam>

  <rosparam ns="planning/world_model">
    white_list:
      - [simulator/simulator/manipulator, [simulator/simulator/box1]]
  </rosparam>

<rosparam ns="planning/task_planner/planners/" >
planner1:
  template: "motion_planner"
  type: bfs_tree_planner
  space_name: manipulator_pc
  visualization_body: "simulator/simulator/manipulator/head_sponge"
  visualize_tree: true
  visualize_solution: false
  max_points: 20000
  steering: false
  branches: 10
  specification:
    type: motion_planning_specification
    validity_checker: 
      type: temporal_validity_checker
      cost_function: duration_cost
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: ik_steering_local_planner
      lower_multiple: 500
      upper_multiple: 900
    seeds:
      -
        state: [ 0.9, .2, 0.77 0 0 0 1 0 0 0 0 0 0 0 1.57 0 0 -1.70 0 0 0   0 1.57 0 0 -1.70 0 0 0  1 1]
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 50
  query:
    template: "query_type"
    start_state: [ 0.9, .2, 0.77 0 0 0 1 0 0 0 0 0 0 0 1.57 0 0 -1.70 0 0 0   0 1.57 0 0 -1.70 0 0 0  1 1]
    goal:
      type: radial_goal_region
      distance_metric:
        type: ann_distance_metric
      radius: 3
      accepted_threshold: .6
      state_size: 5
      goal_state: [ 0.9, .2, 0.77 0 0 0 1 0 0 0 0 0 0 -1.57 1.57 0 0 -1.70 0 0 0   0 1.57 0 0 -1.70 0 0 0  1 1]
</rosparam>
   <!--    
  <rosparam ns="planning/task_planner/" >
    stats_criteria:
      elements:
        criterion1:
          condition: 5
          type: iteration_criterion
  </rosparam>
-->
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>

  <node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="" output="screen" args="planning"/>



  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>

  <rosparam ns="visualization/viewer/">
    windows:
      window_1:
        xpos: 920
        ypos: 100
        width: 1000
        height: 1000
        cameras:
          perspective:
            ortho: false
            camera_type: 0
            eye: [0, 0, 1.8]
            center: [1, 0, 0]
            speed: {move: 0.1, rotate: 0.001}
          orthographic:
            ortho: true
            ortho_param:
              left: -300
              right: 300
              bottom: -300
              top: 300
              zNear: 0
              zFar: 1000
            speed: {move: 0.2, rotate: 0.001}
          smooth:
            ortho: false
            camera_type: 2
            eye: [0, -20, 15]
            center: [0, 1, 18]
            speed: {move: 0.2, rotate: 0.001}
  </rosparam>

</launch>