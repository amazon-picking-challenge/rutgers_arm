<launch>  
  <rosparam command="load" ns="" file="$(find prx_input)/templates/spaces/space_types.yaml"/>  
  <rosparam command="load" ns="#NODE#" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml" />
  <rosparam command="load" ns="#NODE#/world_model" file="$(find manipulation)/input/manipulation_simulator.yaml"/>  

  <rosparam command="load" ns="#NODE#/world_model/simulator/obstacles" file="$(find #PACKAGE#)/input/environments/#ENVIRONMENT#.yaml"/>
  <rosparam command="load" ns="#NODE#/world_model/simulator/subsystems/manipulator" file="$(find #PACKAGE#)/input/systems/#SYSTEM#.yaml"/>

#OBJECT_SETUP#

#OBJECT_USE#

  <rosparam command="load" ns="#NODE#">
    # # random_seed: 5646
    # random_seed: 14391835
    simulate: false
    visualize: false
    world_model:
      type: manipulation_world_model
      num_ik_seeds: 10
      IK_databases:
        #SYSTEM#_database:
          distance_metric:
            type: graph_distance_metric
          manipulator: manipulator
          samples: #IK_SAMPLES#
          deserialize_file: #SYSTEM#[#IK_SAMPLES#].database
  </rosparam>

  <!-- ARM CONTEXTS -->
  <rosparam ns="#NODE#/world_model/planning_contexts">
    manipulator_pc:
      default:
        type: "hide_mapping"
    system_full_arm:
      default:
        type: "obstacle_mapping"
      manipulation_context_info:
        full_arm_context_name: "system_full_arm"
        arm_context_name: "system_arm"
        end_effector_context_name: "system_end_effector"
        start_link: #START_LINK#
        end_link: #END_LINK#
        ik_database: #SYSTEM#_database
        left_arm_ik: true
    system_arm:
      default:
       type: "obstacle_mapping"
    system_arm_planning:
      default:
        type: "hide_mapping"
    system_end_effector:
      default:
       type: "hide_mapping"
  </rosparam>

  <rosparam ns="#NODE#/world_model/simulator/subsystems/manipulator">
    initial_state: [1.5681561256801836989893673,-0.6933267886173464233934283,-0.8849957765343199334040492,1.9000335039215263677192524,-2.2107340224187499444497007,-0.8368545446250841290947164,0.9573491235931878007292539,-1.6812774859126198290226739,-0.5125644883535177553923745,1.0773961507954412653020881,1.8738453488311539452126908,1.9879612960600967497271085,-0.9987250827246928475133814,-0.8436528393489071131483570, 1,1]
    planning_contexts:
      manipulator_pc:
        type: "full_mapping"
      system_full_arm:
        type: "baxter_left_full_arm_state_mapping"
      system_arm:
        type: "baxter_left_arm_state_mapping"
      system_end_effector:
        type: "baxter_left_gripper_state_mapping"
      system_arm_planning:
        type: "baxter_left_arm_state_mapping"
  </rosparam>


  <rosparam ns="#NODE#/task_planner/">
    type: pose_generation_tp
    context_name: "system_full_arm"
    nr_object_poses: #NR_POSES#
    save_folder: #ENVIRONMENT#
    min_bounds: [0.40000000,-0.20000000,0.89000000]
    max_bounds: [1.20000000,0.20000000,0.89000000]
    objects:
#OBJECT_ORIENTATION#
    grasping_planner:
      type: grasping_planner
      validity_checker: 
        type: world_model_validity_checker
      sampler:
        type: uniform_sampler
      data_folders: 
        system_full_arm: "prx_packages/manipulation/input/grasp_data/#GRASP_FOLDER#/"
      max_ik_tries: 50
  </rosparam>

  <rosparam ns="#NODE#/problems">
    pick_and_place_problem:
      specification:
          type: motion_planning_specification
          validity_checker: 
            type: constraints_validity_checker
          sampler:
            type: uniform_sampler
          distance_metric:
            type: graph_distance_metric
          local_planner:
            type: bvp_local_planner
          stopping_criteria:
            elements:
              criterion1:
                type: iteration_criterion
                condition: 1
          heuristic_search:
            type: astar_module     
      query:
        type: manipulation_query
        query_type: add_query_points_collisions
        query_collision_type: lazy_collisions
        goal:
          type: multiple_goal_states
          distance_metric:
            type: ann_distance_metric
  </rosparam>

  <node name="#NODE#" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="gdb --args" output="screen" args="#NODE#"/>

</launch>