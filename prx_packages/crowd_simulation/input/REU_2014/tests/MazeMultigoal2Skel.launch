<launch>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
  <rosparam command="load" file="$(find VO)/input/templates/vo_application.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
  <rosparam command="load" ns="controller" file="$(find prx_input)/templates/controllers/multigoal_controller.yaml"/>
  <rosparam command="load" ns="vo_controller" file="$(find VO)/input/templates/vo_controller.yaml"/>
  <rosparam command="load" ns="skeleton" file="$(find motion_capture_data)/input/skeleton/walk_new.yaml"/>

  <rosparam ns="vo_controller">
    input_control_space:
      min: [-500, -500]
      max: [500, 500]
    radius: 10
  </rosparam>

  <rosparam ns="sensing">
    type: VO_sensing_model
    sensors:
        conf_sensor1:
          type: config_sensor
          source: "conf_sensor1"
          sensor_delay: 0.02
        geom_sensor1:
          type: geom_sensor
          source: "geom_sensor1"
          sensor_delay: 0.02
        vel_sensor1:
          type: velocity_sensor
          source: "vel_sensor1"
          sensor_delay: 0.02
  </rosparam>

  <rosparam command="load" ns="simulator/subsystems/controller1">
    template: "controller"
    goal_radius: 3
    multigoals:
     -
        state: [-300, -450]
     -
        state: [300, -450]
     -
        state: [300, -60]
     -
        state: [-195, -45]
     -
        state: [-145, 150]
     -
        state: [-45, 45]
     -
        state: [55, 155]
     -
        state: [155, 45]
     -
        state: [300, 200]
     -
        state: [-190, 270]
     -
        state: [-150, 455]
     -
        state: [-45, 345]
     -
        state: [50, 450]
     -
        state: [150, 345]
     -
        state: [255, 450]
     -
        state: [420, 455]

  </rosparam>

  <rosparam command="load" ns="simulator/subsystems/controller1/subsystems/vo1">
    template: "vo_controller"
    sensing_info:
        vo_sensing:
            type: VO_sensing_info
            sources: ["conf_sensor1", "geom_sensor1", "vel_sensor1"]
            update_delay: 0.02
            system_path: "simulator/controller1/vo1/skeleton1/root"
            max_num_neighbors: 15
            sensing_radius: 30
            obstacle_sensing_radius: 15
  </rosparam>

  <rosparam command="load" ns="simulator/subsystems/controller1/subsystems/vo1/subsystems/skeleton1">
    template: "skeleton"
    initial_state: [-400,-350]
    state_space:
      min: [-550, -550]
      max: [550, 550]
    input_control_space:
      min: [0, -4]
      max: [100, 4]
  </rosparam>


  <rosparam command="load" ns="simulator/subsystems/controller2">
    template: "controller"
    goal_radius: 3
    multigoals:
     -
        state: [420, 455]
     -
        state: [300, 450]
     -
        state: [150, 345]
     -
        state: [50, 450]
     -
        state: [-45, 345]
     -
        state: [-150, 455]
     -
        state: [-190, 270]
     -
        state: [300, 200]
     -
        state: [155, 45]
     -
        state: [55, 155]
     -
        state: [-45, 45]
     -
        state: [-145, 150]
     -
        state: [-195, -45]
     -
        state: [300, -60]
     -
        state: [300, -450]
     -
        state: [-300, -450]
   
  </rosparam>

  <rosparam command="load" ns="simulator/subsystems/controller2/subsystems/vo2">
    template: "vo_controller"
    sensing_info:
        vo_sensing:
            type: VO_sensing_info
            sources: ["conf_sensor1", "geom_sensor1", "vel_sensor1"]
            update_delay: 0.02
            system_path: "simulator/controller2/vo2/skeleton2/root"
            max_num_neighbors: 15
            sensing_radius: 30
            obstacle_sensing_radius: 15
  </rosparam>

  <rosparam command="load" ns="simulator/subsystems/controller2/subsystems/vo2/subsystems/skeleton2">
    template: "skeleton"
    initial_state: [430,455]
    state_space:
      min: [-550, -550]
      max: [550, 550]
    input_control_space:
      min: [0, -4]
      max: [100, 4]
  </rosparam>





  <rosparam command="load" ns="simulator/obstacles" file="$(find REU_2014_VO)/input/templates/environments/large_maze.yaml" />
</launch>