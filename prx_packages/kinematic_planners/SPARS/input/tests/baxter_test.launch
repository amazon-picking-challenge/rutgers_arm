<!-- This file has been tested on PRACSYS revision  -->
<launch>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- = = = = = = = -->
  <!--  Simulation   -->
  <!-- = = = = = = = -->

  <!-- Load independent files -->
  <rosparam command="load" ns="simulation" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
  <rosparam command="load" ns="simulation" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>

  <!-- Load template files -->
  <rosparam command="load" ns="simulation/controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="simulation/plant" file="$(find baxter)input/urdf/baxter.yaml"/>

  <!-- Override template parameters -->
  <rosparam ns="simulation/controller">
  </rosparam>

  <!-- Set up concrete system tree -->
  <rosparam command="load" ns="simulation/simulator/subsystems/consumer">
    template: "controller"
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/baxter">
    template: "plant"
    initial_state: [-0.80684,-1.24394,0.02624,2.46800,3.02419,1.32000,-0.06762,0.00000]
    x_offset: 0.0
    y_offset: 0.0
    z_offset: 3.0
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/obstacles" file="$(find baxter)/input/simulation/baxter_torso.yaml" />
  <rosparam ns="simulation/simulator/obstacles">
    kiva_shelf:
      type: obstacle
      geometries:
        -
          name: shelf
          collision_geometry:
            type: mesh
            filename: meshes/kiva_pod.stl
            material: blue
          visualization_geometry:
            type: mesh
            filename: meshes/kiva_pod.osg
            material: black
          config:
            position: [-0.22,1.29,2.05]
            orientation: [0.7071067811865476, 0, 0, 0.7071067811865476]
        -
          name: surface
          collision_geometry:
            type: box
            dims: [0.195,0.21,0.002]
            material: teal
          config:
            position: [-0.118, 0.97, 3.275]
            orientation: [0,0,0,1]
  </rosparam>

  <!-- = = = = = = = -->
  <!--   Planning    -->
  <!-- = = = = = = = -->

  <!-- Model -->
  <rosparam ns="planning">
  system_mapping:
  -
    pair: [simulator/consumer/baxter, world_model/simulator/baxter]
  consumer: simulator/consumer
  </rosparam>

  <rosparam ns="planning/world_model/planning_contexts">
  full_space:
    default:
      type: full_mapping
  </rosparam>

  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
  <rosparam command="load" ns="planning/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/baxter" file="$(find baxter)input/urdf/baxter.yaml"/>

  <rosparam command="load" ns="planning/world_model/simulator/obstacles" file="$(find baxter)/input/simulation/baxter_torso.yaml" />

  <rosparam ns="planning/world_model/simulator/obstacles">
    kiva_shelf:
      type: obstacle
      geometries:
        -
          name: shelf
          collision_geometry:
            type: mesh
            filename: meshes/kiva_pod.stl
            material: blue
          visualization_geometry:
            type: mesh
            filename: meshes/kiva_pod.osg
            material: black
          config:
            position: [-0.22,1.29,2.05]
            orientation: [0.7071067811865476, 0, 0, 0.7071067811865476]
        -
          name: surface
          collision_geometry:
            type: box
            dims: [0.195,0.21,0.002]
            material: teal
          config:
            position: [-0.118, 0.97, 3.275]
            orientation: [0,0,0,1]
  </rosparam>

  <!-- <rosparam command="load" ns="planning/world_model/simulator/obstacles" file="$(find prx_input)/templates/environments/kiva_pod.yaml" /> -->
  <!-- <rosparam command="load" ns="world_model/simulator/obstacles" file="$(find manipulation)/input/environments/table.yaml" /> -->

  <!-- Structure -->
  <rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>

  <rosparam ns="planning">
    random_seed: 548142
    consumer_mapping:
      -
        pair: [simulator/consumer, full_space]
  </rosparam>

  <rosparam command="load" ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/rrtc.yaml"/>
  <rosparam command="load" ns="planning/task_planner/" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>

  <rosparam ns="planning/task_planner/planners/" >
  planner:
    type: spars2
    heuristic_search:
      type: prm_astar
    stretch_factor: 2.5
    space_name: "full_space"
    visualization_body: "simulator/baxter/end_effector"
    visualize_graph: true
    visualize_solutions: false
    sparse_delta: 25
    dense_delta: 0.5
    delta_prm: false
    pno_mode: false
    graph_color: "green"
  </rosparam>

  <!-- Query -->

  <!-- Load template files -->
  <rosparam command="load" ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
  <rosparam command="load" ns="planning/specification_type" file="$(find prx_input)/templates/specifications/motion_planning_specification.yaml"/>

  <!-- Specify the query parameters -->
  <rosparam ns="planning/problems">
  problem1:
    specification:
      template: "specification_type"
      seeds:
        -
          state: [-0.80684,-1.24394,0.02624,2.46800,3.02419,1.32000,-0.06762,0.00000]
      stopping_criteria:
        elements:
          criterion1:
            type: iteration_criterion
            condition: 2000
      local_planner:
        type: bvp_local_planner
        max_prop_length: 0.2
    query:
      template: "query_type"
      start_state: [-0.80684,-1.24394,0.02624,2.46800,3.02419,1.32000,-0.06762,0.00000]
      goal:
        type: "goal_state"
        distance_metric:
          type: ann_distance_metric
        goal_state: [1.00684,-1.24394,0.02624,2.26800,3.02419,1.02000,-0.06762,0.00000]
  </rosparam>

  <rosparam ns="planning/world_model/simulator/subsystems/baxter">
    x_offset: 0.0
    y_offset: 0.0
    z_offset: 3.0
  </rosparam>

  <!-- = = = = = = = -->
  <!-- Visualization -->
  <!-- = = = = = = = -->
  <include file="$(find baxter)input/visualization.launch"/>

  <!-- Define the planning node -->
  <node name="planning" pkg="prx_planning" type="prx_planning" required="true" launch-prefix="" output="screen" args="planning" />

  <!-- Define the simulation node -->
  <node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>

</launch>
