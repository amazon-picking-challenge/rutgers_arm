<launch>

  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
  <include ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#" file="$(find cloud_manipulation)/input/common_planning_manip.launch"/>
  <include ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#" file="$(find cloud_manipulation)/input/planning/world_models/world_model_baxter.launch"/>  
  <rosparam command="load" ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/world_model/simulator/obstacles" file="$(find cloud_manipulation)/input/cloud/env/#BALL#.yaml" />  
  <rosparam command="load" ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/world_model/simulator/obstacles" file="$(find cloud_manipulation)/input/environments/table.yaml" />
  
  <rosparam ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/" >
    random_seed: #RN#
  </rosparam>

  <rosparam command="load" ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/motion_planner/" file="#PATH#"/>

  <rosparam ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/task_planner/planners/" >
    ungrasped:
      template: "motion_planner"
      space_name: "manipulator_pc"
      visualization_bodies: ["simulator/manipulator/end_effector"]
      visualize_graph: false
      visualize_solutions: false        
      delta_prm: false
      deserialize_file: ungrasped_#RM#_#RN#_#PL#
      serialize_file: ungrasped_#RM#_#RN#_#PL#
      collision_checking: true
      visualize_tree: false
      serialize_plan: false
    grasped:
      template: "motion_planner"
      space_name: "manip_object_pc"
      visualization_bodies: ["simulator/manipulator/end_effector"]
      visualize_graph: false
      visualize_solutions: false        
      delta_prm: false    
      deserialize_file: grasped_#RM#_#RN#_#PL#
      serialize_file: grasped_#RM#_#RN#_#PL#
      collision_checking: true
      visualize_tree: false
      serialize_plan: false
  </rosparam>

  <rosparam ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/spec_template">
    type: motion_planning_specification
    distance_metric:
      type: ann_distance_metric
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: #RM#
      criteria_check_type: 2
    validity_checker:
      type: world_model_validity_checker

  </rosparam>


  <rosparam command="load" ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/query_type" file="$(find cloud_manipulation)/input/cloud/input/query_#BALL#.yaml"/>


  <!-- Specify the query parameters --> 

  <rosparam ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/problems">
  manipulation_problem:
    specification:
      type: "manipulation_specification"
      validity_checker: 
        type: world_model_validity_checker
      sampler:
        type: uniform_sampler
      distance_metric:
        type: ann_distance_metric
      local_planner:
        type: bvp_local_planner
        max_prop_length: 0.06
      z_on_table: 3.4775
      max_tries: 20
      max_different_grasps: 3
      retract_distance: 0.05
      raise_distance: 0.03
      num_poses: 1
      safe_position: [0.25684,-1.34394,0.42624,2.61800,2.84100,2.09400,-0.06762,0]
    query:
      template: query_type      
  </rosparam>




  <rosparam ns="planning_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#/task_planner/" >
    smooths_query: false
    goal_biasing: 6
    replay_plan: false
    dummy_algorithm: false
    statistics_file_name: statistics_tdk.txt 
    cloud_robotics_stat_file: resolve_#RM#RM_#RN#RN_#EN#EN_#PL#PL_#BALL#_#BN#
    tree_based_planning_mode: false
    best_manipulation_combination: true
  </rosparam>

</launch>