<launch>

  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>  
  <include ns="simulation" file="$(find cloud_manipulation)/input/common_simulation.launch"/>
  <include ns="planning" file="$(find cloud_manipulation)/input/common_planning.launch"/>

  <include ns="simulation" file="$(find cloud_manipulation)/input/environments/cup.launch"/>
  <rosparam command="load" ns="simulation/simulator/obstacles" file="$(find cloud_manipulation)/input/environments/shelf.yaml" />
  <rosparam command="load" ns="simulation/simulator/obstacles" file="$(find cloud_manipulation)/input/environments/table.yaml" />

  <include ns="planning" file="$(find cloud_manipulation)/input/planning/world_models/world_model_baxter.launch"/>  
  <rosparam command="load" ns="planning/world_model/simulator/obstacles" file="$(find cloud_manipulation)/input/environments/shelf.yaml" />  
  <rosparam command="load" ns="planning/world_model/simulator/obstacles" file="$(find cloud_manipulation)/input/environments/table.yaml" /> 
  

  <rosparam ns="planning/" >
    random_seed: 14391835
  </rosparam>

   
  <rosparam command="load" ns="planning/motion_planner/" file="$(find input)/templates/motion_planners/prm_star.yaml"/>
 
  <rosparam ns="planning/task_planner/planners/" >
    ungrasped:
      template: "motion_planner"
      space_name: "manipulator_pc"
      visualization_bodies: ["simulator/manipulator/end_effector"]
      visualize_graph: false
      visualize_solution: false        
      delta_prm: false
      deserialize_file: ungrasped_100_1_spar
      serialize_file: ungrasped_100_spars
      collision_checking: true
      visualize_tree: false
      serialize_plan: false
    grasped:
      template: "motion_planner"
      space_name: "manip_object_pc"
      visualization_bodies: ["simulator/manipulator/end_effector"]
      visualize_graph: false
      visualize_solution: false        
      delta_prm: false    
      deserialize_file: grasped_100_1_spars
      serialize_file: grasped_100_1_spars
      collision_checking: true
      visualize_tree: false
      serialize_plan: false
  </rosparam>

  <rosparam ns="planning/spec_template">
    type: motion_planning_specification
    distance_metric:
      type: graph_distance_metric
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 100
      criteria_check_type: 2
    validity_checker:
      type: world_model_validity_checker
  </rosparam>



  <rosparam ns="planning/task_planner/" >
    smooths_query: false
    goal_biasing: 6
    replay_plan: false
    dummy_algorithm: false
    statistics_file_name: statistics_tdk.txt 
    cloud_robotics_stat_file: cloud_robotics_spars_1000
    tree_based_planning_mode: false
    best_manipulation_combination: true
  </rosparam>
  
  <!--rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/-->
  
  <rosparam command="load" ns="planning" file="$(find cloud_manipulation)/input/planning/manipulation_application.yaml"/>

  <include ns="planning" file="$(find cloud_manipulation)/input/planning/queries/query_easy.launch"/>

  <!-- Define the planning node -->
  <node name="planning" pkg="prx_planning" type="prx_planning" 
    required="true" launch-prefix="gdb --args" output="screen" args="planning" />

  <!-- Define the simulation node -->
  <node name="simulation" pkg="prx_simulation" type="prx_simulation" 
    required="true" launch-prefix="" output="screen" args="simulation"/>

  <include file="$(find cloud_manipulation)/input/visualization.launch"/>

</launch>