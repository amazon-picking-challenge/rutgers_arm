/**
 * @file manipulation_mp_specification.hpp
 * 
 * @copyright Software License Agreement (BSD License)
 * Copyright (c) 2014, Rutgers the State University of New Jersey, New Brunswick  
 * All Rights Reserved.
 * For a full description see the file named LICENSE.
 * 
 * Authors:Andrew Dobson, Andrew Kimmel, Athanasios Krontiris, Zakary Littlefield, Rahul Shome, Kostas Bekris 
 * 
 * Email: pracsys@googlegroups.com
 */

#pragma once

#ifndef PRX_MANIPULATION_MP_SPECIFICATION_HPP
#define PRX_MANIPULATION_MP_SPECIFICATION_HPP

#include "prx/utilities/definitions/defs.hpp"
#include "prx/planning/problem_specifications/motion_planning_specification.hpp"
#include "../../../manipulation/planning/modules/pose.hpp"

namespace prx
{
    namespace util
    {
        class parameter_reader_t;
    }

    namespace packages
    {
        namespace baxter
        {
            class manipulator_plant_t;
        }

        namespace rearrangement_manipulation
        {

            /**
             * @anchor manipulation_mp_specification_t
             *
             * 
             * @Author Athanasios Krontiris
             */
            class manipulation_mp_specification_t : public plan::motion_planning_specification_t
            {

              public:

                manipulation_mp_specification_t();

                virtual ~manipulation_mp_specification_t();

                /**
                 * @brief Initialize the specification from input parameters.
                 *
                 * @param reader The reader for the parameters.
                 * @param template_reader A template reader for reading template parameters 
                 */
                virtual void init(const util::parameter_reader_t* reader, const util::parameter_reader_t* template_reader = NULL);

                /**
                 * Links the vector with the poses. The vector contains all the information about the poses.
                 */
                virtual void link_poses(std::vector<manipulation::pose_t>* poses);
                
                /**
                 * Links the vector with the poses that we want to check for collisions. The vector 
                 * contains the state for the pose and the id for that pose.
                 */
                virtual void link_poses_seeds(std::vector< std::pair<unsigned, sim::state_t*> >* poses);

                /**
                 * Links the vector with the query poses that we want to check for collisions. The vector 
                 * contains the state for the pose and the id for that pose.
                 */
                virtual void link_query_poses_seeds(std::vector< std::pair<unsigned, sim::state_t*> >* poses);

                /**
                 * @brief Returns the poses for the objects.
                 *
                 * @return The poses for the objects.
                 */
                virtual const std::vector< std::pair<unsigned, sim::state_t*> >* get_poses() const;

                /**
                 * @brief Returns the query poses for the objects.
                 *
                 * @return The query poses for the objects.
                 */
                virtual const std::vector< std::pair<unsigned, sim::state_t*> >* get_query_poses() const;

                baxter::manipulator_plant_t* _manipulator;

                /**@brief Space for the object that can be grasped. Must be specified only if start a transfer manipulation motion planner.*/
                const util::space_t* object_space;
                /**@brief Objects space that can be used for informing the graph.*/
                const util::space_t* full_collision_object_space;

                /** Indicates if the manipulation motion planner will be in the mode of creating and informing the graphs or just use the graphs*/
                bool is_builder;
                /** Indicates if the manipulation motion planner deals with a transfer or transit graph*/
                bool transfer_mode;
                


                /**@brief The file that the manipulation motion planner will find the stored graph, generated by any other motion planner.*/
                std::string graph_deserialization_file;
                /**@brief The file that the manipulation motion planner will store the manipulation graph, after inform it with the collisions.*/
                std::string serialization_file;
                /**@brief The file that the manipulation motion planner will find the stored manipulation graph. This is for the online process.*/
                std::string deserialization_file;

                std::set<unsigned>* valid_constraints;
                
                std::vector<std::set<unsigned> > poses_constraints;
                const util::space_t* manip_state_space;
                sim::state_t* safe_state;
                
                std::vector<sim::state_t*>* extra_starting_states;
                
                /** @brief A link to the poses_set in order to have access in the entire information about the poses*/
                std::vector<manipulation::pose_t>* poses_set;

              protected:                
                /** @brief All the poses that will inform the graph. Id for the pose and the state*/
                std::vector< std::pair<unsigned, sim::state_t*> >* poses;
                /** @brief The new poses that correspond to the initial and final positions.*/
                std::vector< std::pair<unsigned, sim::state_t*> >* query_poses;
            };
        }
    }
}

#endif
