



<launch>  





<rosparam ns="simulation/simulator/obstacles">
floor:
  type: bullet_obstacle
  geometries:
    -
      name: ground
      collision_geometry:
        type: cylinder
        height: .002
        radius: 15
        material: red
      config:
        position: [30 30 0]
        orientation: [0 0 0 1]
</rosparam> 
<!-- <rosparam ns="planning/world_model/simulator/obstacles">
floor:
  type: bullet_obstacle
  geometries:
    -
      name: ground
      collision_geometry:
        type: heightmap
        filename: "heightmap.txt"
        material: viridian
      config:
        position: [0 0 0]
        orientation: [0 0 0 1]
</rosparam> -->





  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />

  <rosparam ns="simulation/simulator" command="load" >  
  type: ntrt_simulator
  simulation_step: 0.001
  collision_checker:
    type: bullet
  </rosparam>

  <rosparam ns="planning/world_model" command="load" >  
  simulator:
    type: ntrt_simulator
    simulation_step: 0.001
    collision_checker:
      type: bullet
  </rosparam>

  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
<rosparam ns="simulation/controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/rover"
    file="$(find NTRT_interface)/input/ntrt_plant.yaml"/>

<rosparam ns="simulation/simulator/subsystems/consumer">
  template: "controller"
  keep_last_control: true
  keep_last_state: false
  <!-- deserialize_plan: "/home/zak/repos/pracsys_ws/src/pracsys/prx_packages/NTRT_interface/input/picture_plan.txt" -->
  <!-- deserialize_plan: "/home/zak/repos/pracsys_ws/src/pracsys/prx_output/published_plans/plan.txt" -->
</rosparam>

  <rosparam ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam ns="planning">
simulate: true
visualize: true
persistent: false
random_seed: 1166088941
consumer_mapping:
  - 
    pair: [simulator/consumer, space1]
world_model:
  type: default_world_model
</rosparam>
       
  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
 
  <rosparam ns="planning/task_planner/" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>

  <rosparam ns="planning/task_planner/" >
    stats_criteria:
      elements:
        criterion1:
          condition: 100000
          type: iteration_criterion
    specification:
      type: single_shot_specification
    query:
      type: single_shot_query
      search_mode: lazy_search
  </rosparam>

<rosparam ns="planning/task_planner/planners/" >
planner1:
  template: "motion_planner"
  type: sst
  space_name: space1
  visualization_body: "simulator/rover/rod0"
  visualize_tree: true
  visualize_solution: true
  visualize: true
  sample_metric:
    type: graph_distance_metric
  max_points: 50001
  delta_drain: .3
  steering: false
  delta_near: 0
  collision_checking: true
  use_heuristic: false
  branch_and_bound: true
  rrt_first: true
  goal_bias_rate: .4
  specification:
    type: motion_planning_specification
    validity_checker: 
      type: temporal_validity_checker
      cost_function: duration_cost
    sampler:
      type: superball_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: time_varying_local_planner
      lower_multiple: 500
      upper_multiple: 900
    seeds:
      -
        state: [0.717,0.393,8.125]
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 500
  query:
    template: "query_type"
    start_state: [0.717,0.393,8.125]
    goal:
      type: "radial_goal_region"
      distance_metric:
        type: ann_distance_metric
      radius: 5
      goal_state: [80,80,7]
</rosparam>
       
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>

<rosparam ns="planning">
  system_mapping:
  - 
    pair: [simulator/consumer/rover, world_model/simulator/rover]

  consumer: simulator/consumer
</rosparam>
<rosparam command="load" ns="planning/world_model/planning_contexts" >
space1:
  use_embedded_space: true
  default:
    type: superball_center
</rosparam>
   
  <rosparam ns="planning/world_model/simulator/subsystems/rover" file="$(find NTRT_interface)/input/ntrt_plant.yaml"/>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true"   launch-prefix="" output="screen" />
  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>


  <node name="planning" pkg="prx_planning" type="prx_planning"
        required="false" respawn="false" launch-prefix="" output="screen" args="planning" />


</launch>


