<launch>
<rosparam ns="rover_drain_rrt_0">
debug: true
persistent: false
simulate: false
task_planner:
  stats_criteria:
    elements:
      criterion1: 
        condition: 500
        type: iteration_criterion
  type: single_shot
type: single_query_application
visualize: false
random_seed: 0
queries:
  query:
    goal:
      distance_metric: {distance_function: default, type: linear_distance_metric}
      type: radial_goal_region
    stopping_criteria:
      elements:
        criterion1: {condition: 500000, type: iteration_criterion}
    type: motion_planning_query
world_model:
  simulator:
    collision_checker:
      type: pqp
    simulation_step: 0.005
    type: collision_stop_simulator
</rosparam>

<rosparam ns="rover_drain_rrt_0/queries/query/goal" file="query_yaml/rover_query.yaml"/>
<rosparam ns="rover_drain_rrt_0/task_planner/planners/rover_drain_rrt_0" file="plant_overrides/rover_override.yaml"/>
<rosparam ns="rover_drain_rrt_0/task_planner/planners/rover_drain_rrt_0" file="planner_yaml/drain_rrt.yaml"/>
<rosparam ns="rover_drain_rrt_0/world_model/simulator/subsystems/system" file="plant_yaml/rover.yaml"/>
<rosparam ns="rover_drain_rrt_0/world_model/simulator/obstacles" file="obstacle_yaml/rover_obstacles.yaml"/>
<rosparam ns="rover_drain_rrt_0/world_model" file="model_overrides/rover_override.yaml"/>

<rosparam ns="point_rrt_star_0">
debug: true
persistent: false
simulate: false
task_planner:
  stats_criteria:
    elements:
      criterion1: 
        condition: 500
        type: iteration_criterion
  type: single_shot
type: single_query_application
visualize: false
random_seed: 0
queries:
  query:
    goal:
      distance_metric: {distance_function: default, type: linear_distance_metric}
      type: radial_goal_region
    stopping_criteria:
      elements:
        criterion1: {condition: 500000, type: iteration_criterion}
    type: motion_planning_query
world_model:
  simulator:
    collision_checker:
      type: pqp
    simulation_step: 0.005
    type: collision_stop_simulator
</rosparam>

<rosparam ns="point_rrt_star_0/queries/query/goal" file="query_yaml/point_query.yaml"/>
<rosparam ns="point_rrt_star_0/task_planner/planners/point_rrt_star_0" file="plant_overrides/point_override.yaml"/>
<rosparam ns="point_rrt_star_0/task_planner/planners/point_rrt_star_0" file="planner_yaml/rrt_star.yaml"/>
<rosparam ns="point_rrt_star_0/world_model/simulator/subsystems/system" file="plant_yaml/point.yaml"/>
<rosparam ns="point_rrt_star_0/world_model/simulator/obstacles" file="obstacle_yaml/recreate_rrt_star.yaml"/>
<rosparam ns="point_rrt_star_0/world_model" file="model_overrides/point_override.yaml"/>

<rosparam ns="point_rrt_0">
debug: true
persistent: false
simulate: false
task_planner:
  stats_criteria:
    elements:
      criterion1: 
        condition: 500
        type: iteration_criterion
  type: single_shot
type: single_query_application
visualize: false
random_seed: 0
queries:
  query:
    goal:
      distance_metric: {distance_function: default, type: linear_distance_metric}
      type: radial_goal_region
    stopping_criteria:
      elements:
        criterion1: {condition: 500000, type: iteration_criterion}
    type: motion_planning_query
world_model:
  simulator:
    collision_checker:
      type: pqp
    simulation_step: 0.005
    type: collision_stop_simulator
</rosparam>

<rosparam ns="point_rrt_0/queries/query/goal" file="query_yaml/point_query.yaml"/>
<rosparam ns="point_rrt_0/task_planner/planners/point_rrt_0" file="plant_overrides/point_override.yaml"/>
<rosparam ns="point_rrt_0/task_planner/planners/point_rrt_0" file="planner_yaml/rrt.yaml"/>
<rosparam ns="point_rrt_0/world_model/simulator/subsystems/system" file="plant_yaml/point.yaml"/>
<rosparam ns="point_rrt_0/world_model/simulator/obstacles" file="obstacle_yaml/recreate_rrt_star.yaml"/>
<rosparam ns="point_rrt_0/world_model" file="model_overrides/point_override.yaml"/>

<rosparam ns="point_drain_rrt_0">
debug: true
persistent: false
simulate: false
task_planner:
  stats_criteria:
    elements:
      criterion1: 
        condition: 500
        type: iteration_criterion
  type: single_shot
type: single_query_application
visualize: false
random_seed: 0
queries:
  query:
    goal:
      distance_metric: {distance_function: default, type: linear_distance_metric}
      type: radial_goal_region
    stopping_criteria:
      elements:
        criterion1: {condition: 500000, type: iteration_criterion}
    type: motion_planning_query
world_model:
  simulator:
    collision_checker:
      type: pqp
    simulation_step: 0.005
    type: collision_stop_simulator
</rosparam>

<rosparam ns="point_drain_rrt_0/queries/query/goal" file="query_yaml/point_query.yaml"/>
<rosparam ns="point_drain_rrt_0/task_planner/planners/point_drain_rrt_0" file="plant_overrides/point_override.yaml"/>
<rosparam ns="point_drain_rrt_0/task_planner/planners/point_drain_rrt_0" file="planner_yaml/drain_rrt.yaml"/>
<rosparam ns="point_drain_rrt_0/world_model/simulator/subsystems/system" file="plant_yaml/point.yaml"/>
<rosparam ns="point_drain_rrt_0/world_model/simulator/obstacles" file="obstacle_yaml/recreate_rrt_star.yaml"/>
<rosparam ns="point_drain_rrt_0/world_model" file="model_overrides/point_override.yaml"/>

<rosparam ns="prx">
 spaces: {AirControl: EEE, Airplane: EEEREEE, DynamicRigidBody: EEEQQQQEEEEEE, EMPTY: '',HeliControl: EERR, ODE_B: E, ODE_J: E, OneLink: RE, R: R, RR: RR, RallyCar: EEEEREEE,RallyCarTask: EEER, Rd: E, Rdd: E, SE2: EER, SE3: EEEQQQQ, SOCar: EEREE, TWO_D_BODY: EEEE,ThreeLink: RRREEE, Time: E, TwoLink: RREE, Vector: ER, WheelControl: REE, X: E,XR: ER, XXd: EE, XXdRRd: EERE, XY: EE, XYZ: EEE, Xd: E, XdRd: EE, XdYd: EE, Xdd: E,XddRdd: EE, XddYdd: EE, bomb_state: EEE}</rosparam>
</launch>