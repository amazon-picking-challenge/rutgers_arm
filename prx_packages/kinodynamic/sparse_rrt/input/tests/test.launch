<launch>
<rosparam command="load" ns="rrt_steering_on_test" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam>
rrt_steering_on_test:
  simulate: false
  visualize: false
  random_seed: 984
  persistent: false
</rosparam>
<rosparam command="load" ns="rrt_steering_on_test/motion_planner" file="$(find sparse_rrt)/input/templates/sparse_rrt.yaml"/>
<!-- 
<rosparam command="load" ns="rrt_steering_on_test/motion_planner" file="$(find prx_input)/templates/motion_planners/rrt_star.yaml"/> 
-->
<rosparam command="load" ns="rrt_steering_on_test/task_planner" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>
<rosparam ns="rrt_steering_on_test/task_planner/planners/planner" >
template: motion_planner
space_name: no_embedding
validity_checker:
  type: world_model_validity_checker
sampler:
  type: uniform_sampler
local_planner:
  type: bvp_local_planner
  lower_multiple: 10
  upper_multiple: 200
  num_controls: 20
  max_multiple: 500
  max_length: .5
distance_metric:
  type: graph_distance_metric
  distance_function: default
max_points: 1000000
delta_drain: 0
delta_near: 0
threshold: .8
steering: true
radius_solution: true
collision_checking: false
visualize: false
visualize_tree: false
visualize_solution: false
visualization_body: simulator/system/body
</rosparam>
<rosparam command="load" ns="rrt_steering_on_test/task_planner" >
stats_criteria:
  elements:
    criterion1:
      type: timed_criterion
      condition: 30
</rosparam>
<rosparam command="load" ns="rrt_steering_on_test/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam command="load" ns="rrt_steering_on_test/query_type" >
start_state: [0, 0]
goal:
  type: radial_goal_region
  distance_metric:
    type: linear_distance_metric
    distance_function: default
  goal_state: [180, 180]
  radius: 1
stopping_criteria:
  elements:
    criterion1:
      type: iteration_criterion
      condition: 999999
</rosparam>
<rosparam command="load" ns="rrt_steering_on_test/queries/query1" >
template: query_type
</rosparam>
<rosparam command="load" ns="rrt_steering_on_test/world_model/embeddings" >
space1:
  default:
    type: full_mapping
</rosparam>
<rosparam command="load" ns="rrt_steering_on_test/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
<rosparam command="load" ns="rrt_steering_on_test/world_model/simulator" >
simulation_step: 0.002
</rosparam><rosparam command="load" ns="rrt_steering_on_test/world_model/simulator/subsystems/system" file="$(find prx_input)/templates/plants/disk.yaml"/>

 <rosparam ns="rrt_steering_on_test">
  <!-- First define the mapping between simulation and world model plants -->
  system_mapping:
  - 
    pair: [simulator/consumer/system, world_model/simulator/system]

  consumer: simulator/consumer
  </rosparam>

<!--
  <rosparam command="load" ns="rrt_steering_on_test/world_model/simulator/obstacles"
     file="$(find prx_input)/templates/environments/single_obstacle.yaml"/>
-->      
  <rosparam command="load" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- Load template files -->
  <rosparam ns="simulator">
  simulation_step: 0.002
  </rosparam>

        
  <rosparam command="load" ns="controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="plant" file="$(find prx_input)/templates/plants/disk.yaml"/>
  
  <!-- Override template parameters -->
        
  <rosparam ns="controller">
  </rosparam>
       
  <!-- Set up concrete system tree -->
   
  <rosparam command="load" ns="simulator/subsystems/consumer">
    template: "controller"
    planning_node: /rrt_steering_on_test
  </rosparam>
        
  <rosparam command="load" ns="simulator/subsystems/consumer/subsystems/system">
    template: "plant"
    initial_state: [0,0,0]
  </rosparam>
<!--
  <rosparam command="load" ns="simulator/obstacles"
     file="$(find prx_input)/templates/environments/single_obstacle.yaml"/>
-->
  <!-- Define the simulation node -->
<!--
  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true" launch-prefix="" output="screen" />
  <node name="rrt_steering_on_test" pkg="prx_planning" type="prx_planning"
        required="false" launch-prefix="" output="screen" args="rrt_steering_on_test" />
  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>
-->
</launch>
