<launch>
<rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam>
planning:
  simulate: false
  visualize: false
  random_seed: 87498
  persistent: false
</rosparam>
<rosparam command="load" ns="planning/motion_planner" file="$(find sparse_rrt)/input/templates/reachable_sparse_rrt.yaml"/>
<rosparam command="load" ns="planning/task_planner" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>
<rosparam ns="planning/task_planner/planners/planner" >
template: motion_planner
type: reachable_sparse_rrt
space_name: no_embedding
validity_checker:
  type: world_model_validity_checker
sampler:
  type: uniform_sampler
local_planner:
  type: time_varying_local_planner
  lower_multiple: 30
  upper_multiple: 50
  num_controls: 1
distance_metric:
  type: graph_distance_metric
  distance_function: default
max_points: 300000
cell_sizes: [2,2,.2]
min_bound: [-20,-20,-1]
max_bound: [20,20,1]
reach_steps: 25
delta_drain: 0
delta_near: 0
intersection_radius: 100
num_trajectories: 50
radius_solution: true
collision_checking: true
cost_threshold: 20
visualize: true
visualize_tree: false
visualize_solution: true
visualization_body: simulator/system/chassis
</rosparam>
<rosparam command="load" ns="planning/task_planner" >
stats_criteria:
  elements:
    criterion1:
      type: timed_criterion
      condition: 5
</rosparam>
<rosparam command="load" ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam command="load" ns="planning/query_type" >
start_state: [-240,120,0]
goal:
  type: radial_goal_region
  distance_metric:
    type: linear_distance_metric
    distance_function: default
  goal_state: [240, -120, -1.57]
  radius: 5
stopping_criteria:
  elements:
    criterion1:
      type: timed_criterion
      condition: 300
</rosparam>
<rosparam command="load" ns="planning/queries/query1" >
template: query_type
</rosparam>
<rosparam command="load" ns="planning/world_model/embeddings" >
space1:
  default:
    type: full_mapping
</rosparam>
<rosparam command="load" ns="planning/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
<rosparam command="load" ns="planning/world_model/simulator" >
simulation_step: 0.02
</rosparam><rosparam command="load" ns="planning/world_model/simulator/subsystems/system" file="$(find prx_input)/templates/plants/car.yaml"/>

<rosparam ns="planning/world_model/simulator/subsystems/system" >
input_control_space:
  min: [50,-1]
  max: [50,1]
state_space:
  min: [-300,-300,-3.14]
  max: [300,300,3.14]
integrator:
  type: euler
</rosparam>

  <rosparam command="load" ns="planning/world_model/simulator/obstacles"
     file="$(find prx_input)/templates/environments/large_box_maze.yaml"/>

 <rosparam ns="planning">
  <!-- First define the mapping between simulation and world model plants -->
  system_mapping:
  - 
    pair: [simulator/consumer/system, world_model/simulator/system]

  consumer: simulator/consumer
  </rosparam>
        
  <rosparam command="load" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- Load template files -->
  <rosparam ns="simulator">
  simulation_step: 0.02
  </rosparam>

        
  <rosparam command="load" ns="controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="plant" file="$(find prx_input)/templates/plants/car.yaml"/>
  
  <!-- Override template parameters -->
        
  <rosparam ns="controller">
  </rosparam>
       
  <!-- Set up concrete system tree -->
   
  <rosparam command="load" ns="simulator/subsystems/consumer">
    template: "controller"
    planning_node: /planning
  </rosparam>
        
  <rosparam command="load" ns="simulator/subsystems/consumer/subsystems/system">
    template: "plant"
    initial_state: [-240,120,-1]
    input_control_space:
      min: [50,-1]
      max: [50,1]
    state_space:
      min: [-300,-300,-3.14]
      max: [300,300,3.14]
    integrator:
      type: euler
  </rosparam>

  <rosparam command="load" ns="simulator/obstacles"
     file="$(find prx_input)/templates/environments/large_box_maze.yaml"/>


  <node name="planning" pkg="prx_planning" type="prx_planning"
        required="true" launch-prefix="" output="screen" args="planning" />

<!--
  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true" launch-prefix="" output="screen" />
  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>
-->
</launch>
