<launch>
<rosparam command="load" ns="sparse_rrt_planner" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam>
sparse_rrt_planner:
  simulate: true
  visualize: true
  random_seed: 398
  persistent: false
</rosparam>
<rosparam command="load" ns="sparse_rrt_planner/motion_planner" file="$(find sparse_rrt)/input/templates/sparse_rrt.yaml"/>
<!-- <rosparam command="load" ns="sparse_rrt_planner/motion_planner" file="$(find prx_input)/templates/motion_planners/rrt_star.yaml"/> -->
<rosparam command="load" ns="sparse_rrt_planner/task_planner" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>
<rosparam ns="sparse_rrt_planner/task_planner/planners/planner" >
template: motion_planner
space_name: no_embedding
validity_checker:
  type: world_model_validity_checker
sampler:
  type: uniform_sampler
local_planner:
  type: time_varying_local_planner
  lower_multiple: 5
  upper_multiple: 50
  max_prop_length: .1
distance_metric:
  type: graph_distance_metric
  distance_function: default
max_points: 1000001
delta_drain: .5
delta_near: .6
threshold: .8
steering: false
radius_solution: true
collision_checking: false
visualize: false
visualize_tree: false
visualize_solution: false
visualization_body: simulator/system/body
</rosparam>
<rosparam command="load" ns="sparse_rrt_planner/task_planner" >
stats_criteria:
  elements:
    criterion1:
      type: iteration_criterion
      condition: 1000
</rosparam>
<rosparam command="load" ns="sparse_rrt_planner/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam command="load" ns="sparse_rrt_planner/query_type" >
start_state: [0, 0]
goal:
  type: radial_goal_region
  distance_metric:
    type: linear_distance_metric
    distance_function: default
  goal_state: [9,9]
  radius: 1
stopping_criteria:
  elements:
    criterion1:
      type: iteration_criterion
      condition: 7000000
</rosparam>
<rosparam command="load" ns="sparse_rrt_planner/queries/query1" >
template: query_type
</rosparam>
<rosparam command="load" ns="sparse_rrt_planner/world_model/embeddings" >
space1:
  default:
    type: full_mapping
</rosparam>
<rosparam command="load" ns="sparse_rrt_planner/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
<rosparam command="load" ns="sparse_rrt_planner/world_model/simulator" >
simulation_step: 0.002
</rosparam><rosparam command="load" ns="sparse_rrt_planner/world_model/simulator/subsystems/system" file="$(find sparse_rrt)/input/templates/small_point.yaml"/>

 <!-- <rosparam command="load" ns="sparse_rrt_planner/world_model/simulator/obstacles" file="$(find sparse_rrt)/input/templates/recreate.yaml" /> -->
 <rosparam ns="sparse_rrt_planner">
  <!-- First define the mapping between simulation and world model plants -->
  system_mapping:
  - 
    pair: [simulator/consumer/system, world_model/simulator/system]

  consumer: simulator/consumer
  </rosparam>  

  <rosparam command="load" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- Load template files -->
  <rosparam ns="simulator">
  simulation_step: 0.002
  </rosparam>

        
  <rosparam command="load" ns="controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" ns="plant" file="$(find sparse_rrt)/input/templates/small_point.yaml"/>
  
  <!-- Override template parameters -->
        
  <rosparam ns="controller">
  </rosparam>
       
  <!-- Set up concrete system tree -->
   
  <rosparam command="load" ns="simulator/subsystems/consumer">
    template: "controller"
    planning_node: /sparse_rrt_planner
    keep_last_control: false
  </rosparam>
        
  <rosparam command="load" ns="simulator/subsystems/consumer/subsystems/system">
    template: "plant"
    initial_state: [0,0]
  </rosparam>
  <!-- <rosparam command="load" ns="simulator/obstacles" file="$(find sparse_rrt)/input/templates/recreate.yaml" /> -->

  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true" launch-prefix="" output="screen" />
  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>

  <node name="sparse_rrt_planner" pkg="prx_planning" type="prx_planning"
        required="false" launch-prefix="" output="screen" args="sparse_rrt_planner" />
</launch>
