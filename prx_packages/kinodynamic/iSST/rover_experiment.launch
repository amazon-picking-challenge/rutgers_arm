<launch>
 <rosparam file="$(find prx_input)/templates/spaces/space_types.yaml"/>

<rosparam ns="simulation" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
<rosparam ns="simulation" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
<rosparam ns="simulation/controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
<rosparam ns="simulation/plant" file="$(find prx_input)/templates/plants/rally_car.yaml"/>

<rosparam ns="simulation/simulator/subsystems/consumer">
  template: "controller"
  keep_last_control: false
  keep_last_state: true
</rosparam>

<rosparam ns="simulation/simulator/subsystems/consumer/subsystems/rover">
template: "plant"
initial_state: [18,-30,0,16,1.57,0,0,0]
</rosparam>


  <rosparam ns="simulation/simulator/obstacles" file="$(find prx_input)/templates/environments/rally_car_180.yaml" />
  <rosparam ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>

<rosparam ns="planning">
random_seed: 56849
consumer_mapping:
  - 
    pair: [simulator/consumer, true_space]
</rosparam>
        
  <!-- Load template files -->
       
  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
  <rosparam ns="planning/motion_planner2/" file="$(find prx_input)/templates/motion_planners/rrt_star.yaml"/>
 
  <rosparam ns="planning/task_planner/" >
    type: heuristic_task_planner
    real_planner: isst
    heuristic_planner: prm
    stats_criteria:
      elements:
        criterion1:
          condition: 1000
          type: iteration_criterion
  </rosparam>

<rosparam ns="planning/task_planner/planners/" >
isst:
  template: "motion_planner"
  type: isst
  space_name: "true_space"
  visualization_body: "simulator/rover/chassis"
  visualize_tree: true
  visualize_solution: true
  sample_metric:
    type: graph_distance_metric
  max_points: 300001
  delta_drain: 3
  steering: false
  delta_near: 4
  rrt_first: true
  use_heuristic: true
  branch_and_bound: true
prm:
  template: "motion_planner2"
  space_name: "approximate_space"
  visualization_body: "simulator/rigid_rover/chassis"
  visualize_tree: false
  visualize_solution: false
  graph_color: green
</rosparam>
       
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam ns="planning/problems">
problem1:
  specification:
    type: heuristic_task_specification
    state_mapping: 
      type: rally_car_mapping
    real_specification:
      type: motion_planning_specification
      validity_checker: 
        type: world_model_validity_checker
        cost_function: trrt_cost_function
      sampler:
        type: uniform_sampler
      distance_metric:
        type: graph_distance_metric
      local_planner:
        type: time_varying_local_planner
        lower_multiple: 2
        upper_multiple: 50
      seeds:
        -
          state: [18,-30,0,16,1.57,0,0,0]
      stopping_criteria:
        elements:
          criterion1:
            type: iteration_criterion
            condition: 500000
    heuristic_specification:
      type: motion_planning_specification
      validity_checker: 
        type: world_model_validity_checker
        cost_function: trrt_cost_function
      sampler:
        type: uniform_sampler
      distance_metric:
        type: graph_distance_metric
      local_planner:
        type: bvp_local_planner
      seeds:
        -
          state: [-18,-30,-1.57]
        -
          state: [18,-30,1.57]
      stopping_criteria:
        elements:
          criterion1:
            type: iteration_criterion
            condition: 5000
  query:
    template: "query_type"
    start_state: [18,-30,0,16,1.57,0,0,0]
    goal:
      type: "radial_goal_region"
      distance_metric:
        type: ann_distance_metric
      goal_state: [-18,-30,0,-16,-1.57,0,0,0]
      radius: 5
</rosparam>

<rosparam ns="planning">
  system_mapping:
  - 
    pair: [simulator/consumer/rover, world_model/simulator/rover]

  consumer: simulator/consumer
</rosparam>

<rosparam ns="planning/world_model/planning_contexts">
true_space:
  default:
    type: "full_mapping"
approximate_space:
  default:
    type: "full_mapping"
</rosparam>
  <rosparam ns="planning/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>



  <rosparam ns="planning/world_model/simulator/obstacles" file="$(find prx_input)/templates/environments/rally_car_180.yaml" />
   
  <rosparam ns="planning/world_model/simulator/subsystems/rover" file="$(find prx_input)/templates/plants/rally_car.yaml"/>

  <rosparam ns="planning/world_model/simulator/subsystems/rigid_rover" file="$(find prx_input)/templates/plants/rally_car.yaml"/>
  
  <rosparam ns="planning/world_model/simulator/subsystems/rigid_rover">
type: rigid_body
integrator: euler
max_step: 0.20
state_space: 
  min: [-20, -31, -3.14]
  max: [20, 20, 3.14]
  scale: [1, 1, 12]
input_control_space:
  min: [-20, -31, -3.14]
  max: [20, 20, 3.14]
planning_contexts:
  true_space: 
    type: hide_mapping
  </rosparam> 

  
  <rosparam ns="planning/world_model/simulator/subsystems/rover">
planning_contexts:
  approximate_space: 
    type: hide_mapping
state_space: 
  min: [-25, -31, -18, -18, -3.14, -17, -40, -40]
  max: [25, 25, 18, 18, 3.14, 17, 40, 40]
  scale: [1, 1, 0, 0, 12, 0, 0, 0]
  </rosparam>

<node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>

<node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="" output="screen" args="planning" />

<include file="$(find prx_input)/templates/visualization/visualization.launch"/>


</launch>